# Raft configuration
[raft]
# The raft port should be open between all servers in a cluster.
# However, this port shouldn't be accessible from the internet.

port = <%= @raft_port %>

# Where the raft logs are stored. The user running InfluxDB will need read/write access.
dir  = "<%= @raft_dir %>"

debug = false

# election-timeout = "1s"
election-timeout = "<%= @raft_election_timeout %>"

[cluster]
# A comma separated list of servers to seed
# this server. this is only relevant when the
# server is joining a new cluster. Otherwise
# the server will use the list of known servers
# prior to shutting down. Any server can be pointed to
# as a seed. It will find the Raft leader automatically.

# Here's an example. Note that the port on the host is the same as the raft port.
# seed-servers = ["hosta:8090","hostb:8090"]
seed-servers = <%= @cluster_seed_servers %>

# Replication happens over a TCP connection with a Protobuf protocol.
# This port should be reachable between all servers in a cluster.
# However, this port shouldn't be accessible from the internet.

protobuf_port = <%= @cluster_protobuf_port %>
protobuf_timeout = "<%= @cluster_protobuf_timeout%>"
protobuf_heartbeat = "<%= @cluster_protobuf_heartbeat %>"
protobuf_min_backoff = "<%= @cluster_protobuf_min_backoff %>"
protobuf_max_backoff = "<%= @cluster_protobuf_max_backoff %>"

# How many write requests to potentially buffer in memory per server. If the buffer gets filled then writes
# will still be logged and once the server has caught up (or come back online) the writes
# will be replayed from the WAL
write-buffer-size = <%= @cluster_write_buffer_size %>

# the maximum number of responses to buffer from remote nodes, if the
# expected number of responses exceed this number then querying will
# happen sequentially and the buffer size will be limited to this
# number
max-response-buffer-size = <%= @cluster_max_response_buffer_size %>

# When queries get distributed out to shards, they go in parallel. This means that results can get buffered
# in memory since results will come in any order, but have to be processed in the correct time order.
# Setting this higher will give better performance, but you'll need more memory. Setting this to 1 will ensure
# that you don't need to buffer in memory, but you won't get the best performance.
concurrent-shard-query-limit = <%= @cluster_concurrent_shard_query_limit %>


