[storage]

dir = "<%= @storage_dir %>"
# How many requests to potentially buffer in memory. If the buffer gets filled then writes
# will still be logged and once the local storage has caught up (or compacted) the writes
# will be replayed from the WAL
write-buffer-size = <%= @storage_write_buffer_size %>

# the engine to use for new shards, old shards will continue to use the same engine
default-engine = "leveldb"

# The default setting on this is 0, which means unlimited. Set this to something if you want to
# limit the max number of open files. max-open-files is per shard so this * that will be max.
max-open-shards = 0

# The default setting is 100. This option tells how many points will be fetched from LevelDb before
# they get flushed into backend.
point-batch-size = 100

# The number of points to batch in memory before writing them to leveldb. Lowering this number will
# reduce the memory usage, but will result in slower writes.
write-batch-size = 5000000

# The server will check this often for shards that have expired that should be cleared.
retention-sweep-period = "10m"

[storage.engines.leveldb]

# Maximum mmap open files, this will affect the virtual memory used by
# the process
max-open-files = 1000

# LRU cache size, LRU is used by leveldb to store contents of the
# uncompressed sstables. You can use `m` or `g` prefix for megabytes
# and gigabytes, respectively.
lru-cache-size = "200m"

[storage.engines.rocksdb]

# Maximum mmap open files, this will affect the virtual memory used by
# the process
max-open-files = 1000

# LRU cache size, LRU is used by rocksdb to store contents of the
# uncompressed sstables. You can use `m` or `g` prefix for megabytes
# and gigabytes, respectively.
lru-cache-size = "200m"

[storage.engines.hyperleveldb]

# Maximum mmap open files, this will affect the virtual memory used by
# the process
max-open-files = 1000

# LRU cache size, LRU is used by rocksdb to store contents of the
# uncompressed sstables. You can use `m` or `g` prefix for megabytes
# and gigabytes, respectively.
lru-cache-size = "200m"

[storage.engines.lmdb]

map-size = "100g"

[wal]

dir   = "<%= @wal_dir %>"
flush-after = <%= @wal_flush_after %>
bookmark-after = <%= @wal_bookmark_after %>

# the number of writes after which an index entry is created pointing
# to the offset of the first request, default to 1k
index-after = <%= @wal_index_after %>

# the number of requests per one log file, if new requests came in a
# new log file will be created
requests-per-logfile = <%= @wal_requests_per_logfile %>

[leveldb]
lru-cache-size = "<%= @leveldb_lru_cache_size %>"
point-write-size = <%= @leveldb_point_write_size %>
max-open-files = <%= @leveldb_max_open_files %>
point-batch-size = <%= @leveldb_point_batch_size %>
max-open-shards = <%= @leveldb_max_open_shards %>

